package com.adolfosc.ui;

import com.adolfosc.server.Client;
import com.adolfosc.server.NewClient;
import com.adolfosc.server.Server;
import com.adolfosc.trama.Option;
import com.adolfosc.trama.Trama;
import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hectoradolfo
 */
public class Switch extends javax.swing.JFrame implements Runnable {

    private Server server;
    private int typeSwitch;
    public static String HOST = "localhost";
    public static int PORT = 5000;
    public static int PORT_SEND = 5001;
    private List<Client> clients;
    private NewClient newClient;

    /**
     * Creates new form Switch
     */
    public Switch() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.server = new Server();
        this.btnUnicast.setBackground(Color.GREEN);
        this.typeSwitch = 0;

        this.clients = new ArrayList<>();
        this.newClient = new NewClient();

        Thread thread = new Thread(this);
        thread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUnicast = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaLog = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableArp = new javax.swing.JTable();
        btnBroadcast = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Switch Server");

        btnUnicast.setFont(new java.awt.Font("Manjari Regular", 1, 15)); // NOI18N
        btnUnicast.setText("Unicast");
        btnUnicast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnicastActionPerformed(evt);
            }
        });

        txtaLog.setEditable(false);
        txtaLog.setBackground(new java.awt.Color(153, 204, 255));
        txtaLog.setColumns(20);
        txtaLog.setFont(new java.awt.Font("Purisa", 1, 15)); // NOI18N
        txtaLog.setRows(5);
        txtaLog.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(txtaLog);

        jLabel1.setFont(new java.awt.Font("Manjari Regular", 1, 15)); // NOI18N
        jLabel1.setText("LOG");

        jLabel2.setFont(new java.awt.Font("Manjari Regular", 1, 15)); // NOI18N
        jLabel2.setText("TABLA ARP");

        tableArp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableArp);

        btnBroadcast.setFont(new java.awt.Font("Manjari Regular", 1, 15)); // NOI18N
        btnBroadcast.setText("Broadcast");
        btnBroadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBroadcastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(btnUnicast)
                                .addGap(47, 47, 47)
                                .addComponent(btnBroadcast))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUnicast)
                    .addComponent(btnBroadcast))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUnicastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnicastActionPerformed
        // TODO add your handling code here:
        this.btnUnicast.setBackground(Color.GREEN);
        this.btnBroadcast.setBackground(Color.WHITE);
        this.typeSwitch = 0;
    }//GEN-LAST:event_btnUnicastActionPerformed

    private void btnBroadcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBroadcastActionPerformed
        // TODO add your handling code here:
        this.btnBroadcast.setBackground(Color.GREEN);
        this.btnUnicast.setBackground(Color.WHITE);
        this.typeSwitch = 1;
    }//GEN-LAST:event_btnBroadcastActionPerformed

    @Override
    public void run() {
        // this.server.startServer(txtaLog, typeSwitch);

        try {
            ServerSocket served = new ServerSocket(PORT);

            String mac, ip, message;
            Option type;
            Trama tramaRecibido;

            while (true) {
                try ( Socket socket = served.accept()) {
                    ObjectInputStream dataIn = new ObjectInputStream(socket.getInputStream());
                    //Object as = dataIn.readObject();
                    String myIp = socket.getInetAddress().toString();
                    System.out.println("ip --> " + myIp.substring(1));

                    tramaRecibido = (Trama) dataIn.readObject();;
                    tramaRecibido.setIp(myIp.substring(1));
                    mac = tramaRecibido.getMac();
                    ip = tramaRecibido.getIp();
                    message = tramaRecibido.getMessage();
                    type = tramaRecibido.getType();

                    switch (typeSwitch) {
                        case 0://unicast
                            //verificamos el tipo de peticion del cliente
                            switch (type) {

                                case CONNECTION:
                                    txtaLog.append("\n" + mac + "  -->  " + ip + "  -->  " + message);
                                    if (!this.clients.isEmpty()) {
                                        Client adds = this.newClient.addClient(clients, mac);
                                        if (adds == null) {
                                            this.clients.add(new Client(ip, mac, true));
                                        } else {
                                            txtaLog.append("el usuario " + mac + " ya existe");
                                            System.out.println("este mac ya existe en el sistema, intente con otro!!");
                                        }
                                    } else {
                                        this.clients.add(new Client(ip, mac, true));
                                    }
                                    showClientTable();

                                    String macClient = "";
                                    for (Client client : clients) {
                                        macClient += client.getMac() + "&";

                                    }
                                    tramaRecibido.setMessage(macClient);
                                    tramaRecibido.setType(Option.CLIENTS);
                                    for (Client client : clients) {
                                        System.out.println("client " + client.getIp());
                                        try ( //socket para enviar al destinatario 
                                                 Socket sendData = new Socket(client.getIp(), PORT_SEND)) {
                                            ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                            tramaReenvio.writeObject(tramaRecibido);
                                            tramaReenvio.close();
                                        }
                                    }

                                    /*try ( //socket para enviar al destinatario
                                             Socket sendData = new Socket(tramaRecibido.getIp(), PORT_SEND)) {
                                        ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                        tramaReenvio.writeObject(this.clients);
                                    }*/
                                    break;

                                case MESSAGE:
                                    Client adds = this.newClient.addClient(clients, mac);
                                    txtaLog.append("\n" + mac + "  -->  " + ip + "  -->  " + message);
                                    if (adds != null) {
                                        try ( //socket para enviar al destinatario
                                                 Socket sendData = new Socket(adds.getIp(), PORT_SEND)) {
                                            ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                            tramaReenvio.writeObject(tramaRecibido);
                                        }
                                    } else {
                                        txtaLog.append("el usuario con ese MAC no esta disponible!!");
                                        tramaRecibido.setMessage("no se encontro el usuario destino!");
                                        try ( //socket para enviar al destinatario
                                                 Socket sendData = new Socket(ip, PORT_SEND)) {
                                            ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                            tramaReenvio.writeObject(tramaRecibido);
                                        }
                                    }
                                    break;

                                case CLOSE:
                                    Client clientsClose = this.newClient.addClient(clients, mac);

                                    if (clientsClose != null) {
                                        txtaLog.append("el usuario " + mac + " finalizo conexion");
                                        clients.remove(clientsClose);
                                        showClientTable();
                                    } else {
                                        System.out.println("no existe cliente con este mac para desactivar!!");
                                    }
                                    break;
                                default:
                                    System.out.println("peticion no encontrada : " + type);
                                    break;
                            }
                            break;

                        case 1://broadcast  
                            switch (type) {

                                case CONNECTION:
                                    txtaLog.append("\n" + mac + "  -->  " + ip + "  -->  " + message);
                                    if (!this.clients.isEmpty()) {
                                        Client adds = this.newClient.addClient(clients, mac);
                                        if (adds == null) {
                                            this.clients.add(new Client(ip, mac, true));
                                        } else {
                                            System.out.println("este mac ya existe en el sistema, intente con otro!!");
                                        }
                                    } else {
                                        this.clients.add(new Client(ip, mac, true));
                                    }
                                    showClientTable();

                                    String macClient = "";
                                    for (Client client : clients) {
                                        macClient += client.getMac() + "&";

                                    }
                                    tramaRecibido.setMessage(macClient);
                                    tramaRecibido.setType(Option.CLIENTS);
                                    for (Client client : clients) {
                                        System.out.println("client " + client.getIp());
                                        try ( //socket para enviar al destinatario 
                                                 Socket sendData = new Socket(client.getIp(), PORT_SEND)) {
                                            ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                            tramaReenvio.writeObject(tramaRecibido);
                                            tramaReenvio.close();
                                        }
                                    }

                                    /*try ( //socket para enviar al destinatario
                                             Socket sendData = new Socket(tramaRecibido.getIp(), PORT_SEND)) {
                                        ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                        tramaReenvio.writeObject(this.clients);
                                    }*/
                                    break;

                                case MESSAGE:
                                    txtaLog.append("\n" + mac + "  -->  " + ip + "  -->  " + message);
                                    for (Client client : clients) {
                                        System.out.println("client " + client.getIp());
                                        try ( //socket para enviar al destinatario 
                                                 Socket sendData = new Socket(client.getIp(), PORT_SEND)) {
                                            ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                            tramaReenvio.writeObject(tramaRecibido);
                                            tramaReenvio.close();
                                        }
                                    }
                                    break;

                                case CLOSE:
                                    System.out.println("macs:  " + mac);
                                    Client clientsClose = this.newClient.addClient(clients, mac);

                                    if (clientsClose != null) {
                                        txtaLog.append("el usuario " + mac + " finalizo conexion");
                                        clients.remove(clientsClose);
                                        showClientTable();
                                    } else {
                                        System.out.println("no existe cliente con este mac para desactivar!!");
                                    }
                                    break;
                                default:
                                    System.out.println("peticion no encontrada : " + type);
                                    break;
                            }

                            /* txtaLog.append("\n" + mac + "  -->  " + ip + "  -->  " + message);
                            for (Client client : clients) {
                                System.out.println("client " + client.getIp());
                                try ( //socket para enviar al destinatario 
                                         Socket sendData = new Socket(client.getIp(), PORT_SEND)) {
                                    ObjectOutputStream tramaReenvio = new ObjectOutputStream(sendData.getOutputStream());
                                    tramaReenvio.writeObject(tramaRecibido);
                                    tramaReenvio.close();
                                }
                            }*/
                            break;
                    }

                }
            }

        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void showClientTable() {
        try {
            DefaultTableModel model = new DefaultTableModel();

            String[] head = {"Mac", "IP", "STATUS"};

            model.setColumnIdentifiers(head);

            Object[] row;

            for (Client client : clients) {

                row = new Object[3];
                row[0] = client.getMac();
                row[1] = client.getIp();
                row[2] = client.isStatus();

                model.addRow(row);
            }

            this.tableArp.setModel(model);
        } catch (Exception e) {
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBroadcast;
    private javax.swing.JButton btnUnicast;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableArp;
    private javax.swing.JTextArea txtaLog;
    // End of variables declaration//GEN-END:variables

}
